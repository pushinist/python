import functools
'''
–ü–∞—Ä–∞–¥–∏–≥–º—ã 

–ò–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è (–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å?) + –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è (—á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ?)


–ü—Ä–∏–º–µ—Ä—ã –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π - —Å—Ç—É–∫—Ä—É—Ç—Ä–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –û–û–ü
–ü—Ä–∏–º–µ—Ä—ã –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–π - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Lisp —É–º–µ—Ä üò≠)


–§–∏—à–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:
1) –¥–æ–ª–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏—è–º
2) –¥–æ–ª–æ–π —Ü–∏–∫–ª—ã, —É—Ä–∞ —Ä–µ–∫—É—Ä—Å–∏—è–º

'''


# lambda –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
a = lambda x, y: x + y
print(a(2, 3))
#Output: 5

A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# map(func, iterable object) - –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ-–∏—é –∫ –∫–∞–∂–¥–æ–º—É item –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º map object
aboba = map(str, A)
print(aboba)
# filter(func, iterable object) - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –∑–∞–¥–∞–Ω–Ω—ã–º –≤ —Ñ—É–Ω—Ü–∫–∏–∏, –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º filter object
abobus = filter(lambda x: x % 2 == 0, A)
print(abobus)
# reduce(func, iterable object) - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ
abingus = functools.reduce(lambda x, y: x + y, A) # —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Å–ø–∏—Å–∫–µ
print(abingus)

# zip - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ zip
l = [1, 2, 3]
m = 'abc'
n = [True, False]
autobus = zip(l, m, n)

print(autobus)


'''
##############################################################################################
                                –û–û–ü

–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è - –±–∞–∑–∞, –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ, –æ—Ç–∫–∞–∑ –æ—Ç –º–µ–ª–æ—á–µ–π
–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –æ–¥–Ω–æ–π –∏–¥–µ–∏
–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è - public —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å public, –ø—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–π—Å—Ç–≤ —Å—Ç–∞—Ä—ã—Ö

–ø–ª—é—Å –û–û–ü:
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞

–º–∏–Ω—É—Å –û–û–ü:
—Å–ª–æ–∂–Ω–æ—á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥
–¥–æ–ª—å—à–µ –ø–∏—Å–∞—Ç—å —á–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ
algol, simula, smalltalk

–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –º–æ–¥—É–ª—å tkinter

'''

class Student:
    def __init__(self, name, univ = 'Default Univ', state = False):
        self.name = name # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ (–∏–∑–º–µ–Ω—è–µ–º–æ–µ)
        self.univ = univ # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ (–∏–∑–º–µ–Ω—è–µ–º–æ–µ)
        self.state = state # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ (–∏–∑–º–µ–Ω—è–µ–º–æ–µ)
    
    
    def append(self):
        self.state = True
    

alex = Student("Alex")
print(alex.state) # Output - False
alex.append()
print(alex.state) # Output - True


# –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
class Animal:
    def make_sound(self):
        print("–ò–∑–¥–∞–µ—Ç –∑–≤—É–∫")



class Cat(Animal):
    def dropall(self):
        print('–í—Å–µ —É–ø–∞–ª–æ')
    
    
    def make_sound(self):
        return super().make_sound()
        


class Kitten(Cat):
    def die(self):
        print('–£–º–µ—Ä')

kit = Kitten()
kit.make_sound() 
kit.dropall()
kit.die()